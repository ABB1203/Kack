package game;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable {

	private int WIDTH;
	private int HEIGHT;
	private int SCALE;
	private Dimension DIMENSIONS;

	private String levelPath;
	private boolean running = false;
	private Thread thread;
	private Frame frame;
	
	private Screen screen;

	private BufferedImage image;
	private int[] pixels;

	public Game(String levelPath, int WIDTH, int HEIGHT, int SCALE, JFrame frame) {
		this.WIDTH = WIDTH;
		this.HEIGHT = HEIGHT;
		this.SCALE = SCALE;
		this.frame = frame;

		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();

		DIMENSIONS = new Dimension(WIDTH * SCALE, HEIGHT * SCALE);
		setPreferredSize(DIMENSIONS);
		setMaximumSize(DIMENSIONS);
		setMinimumSize(DIMENSIONS);
		
		screen = new Screen();
	}

	public synchronized void start() {
		running = true;

		thread = new Thread(this, "Canvas");
		thread.start();
	}

	public synchronized void stop() {
		running = false;

		try {
			thread.join();
		} catch (InterruptedException e) {
			System.out.println("Could not join the game thread!");
			e.printStackTrace();
		}
	}

	public void run() {
		long lastTime = System.nanoTime();
		double nsPerTick = 1_000_000_000D / 60D;
		double delta = 0;

		long timer = System.currentTimeMillis();

		int frames = 0;
		int ticks = 0;

		requestFocus();

		while (running) {
			try {
				Thread.sleep(2);
			} catch (InterruptedException e) {
				System.out.println("Could not sleep!");
				e.printStackTrace();
			}

			delta += (System.nanoTime() - lastTime) / nsPerTick;
			lastTime = System.nanoTime();

			while (delta >= 1) {
				ticks++;
				tick();
				delta--;
			}

			if (System.currentTimeMillis() - timer >= 1000) {
				timer += 1000;
				frame.setTitle("UPS: " + ticks + "\t\t         FPS: " + frames);
				frames = 0;
				ticks = 0;
			}

			frames++;
			render();
		}

		stop();
	}

	public void tick() {

	}

	public void render() {
		BufferStrategy bs = getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}

		Graphics g = bs.getDrawGraphics();

		g.setColor(Color.black);
		g.drawRect(0, 0, WIDTH, HEIGHT);

		g.dispose();
		bs.show();

	}

	// ///////////////// GETTERS AND SETTERS////////////////////////////////////
	public int getScreenWidth() {
		return WIDTH * SCALE;
	}

	public int getScreenHeight() {
		return HEIGHT * SCALE;
	}
}
